{"version":3,"sources":["components/Chart.js","components/Inputs.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Chart","selectedCurrency","useState","chartDate","setChartDate","chartExchange","setChartExchange","isLoadedChars","setLoadedChars","error","setError","useEffect","fetch","then","res","json","data","arrDate","arrExchange","rates","forEach","e","date","effectiveDate","slice","push","Math","round","mid","catch","err","console","log","lineState","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderWidth","pointBorderWidth","style","color","options","title","responsive","display","text","fontSize","fontColor","legend","Loader","active","inline","marginTop","Inputs","inputValue","setInputValue","inputExchange","calculatingPLN","className","Input","type","label","labelPosition","placeholder","value","onChange","target","content","disabled","Form","isLoaded","setSelectedCurrency","setInputExchange","selectedExchange","setSelectedExchange","setCalculatingPLN","btnClick","preventDefault","exchange","isNaN","onSubmit","Select","i","length","selection","loading","Button","primary","icon","onClick","secondary","Icon","name","App","setOptions","setLoaded","arr","currency","charAt","toUpperCase","key","code","Container","textAlign","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c3e109b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Loader } from \"semantic-ui-react\";\r\n\r\nfunction Chart({ selectedCurrency }) {\r\n  const [chartDate, setChartDate] = useState([]);\r\n  const [chartExchange, setChartExchange] = useState([]);\r\n  const [isLoadedChars, setLoadedChars] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (selectedCurrency) {\r\n      setLoadedChars(false);\r\n      setError(false);\r\n      fetch(\r\n        `https://api.nbp.pl/api/exchangerates/rates/A/${selectedCurrency}/last/30/?format=json`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          let arrDate = [];\r\n          let arrExchange = [];\r\n\r\n          data.rates.forEach((e) => {\r\n            let date = e.effectiveDate;\r\n            date = date.slice(5, 10);\r\n            arrDate.push(date);\r\n            arrExchange.push(Math.round(e.mid * 10000) / 10000);\r\n          });\r\n          setChartDate(arrDate);\r\n          setChartExchange(arrExchange);\r\n          setLoadedChars(true);\r\n        })\r\n        .catch((err) => {\r\n          setError(true);\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, [selectedCurrency]);\r\n\r\n  const lineState = {\r\n    labels: chartDate,\r\n    datasets: [\r\n      {\r\n        fill: false,\r\n        lineTension: 0,\r\n        backgroundColor: \"#2185d0\",\r\n        borderColor: \"#2185d0\",\r\n        borderWidth: 2,\r\n        data: chartExchange,\r\n        pointBorderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedCurrency ? (\r\n        isLoadedChars ? (\r\n          error ? (\r\n            <p style={{ color: \"red\" }}>\r\n              Wystąpił problem z pobraniem historii waluty, spróbuj ponownie\r\n              później.\r\n            </p>\r\n          ) : (\r\n            <Line\r\n              data={lineState}\r\n              options={{\r\n                title: {\r\n                  responsive: true,\r\n                  display: true,\r\n                  text: `Historia kursu waluty ${selectedCurrency}`,\r\n                  fontSize: 18,\r\n                  fontColor: \"black\",\r\n                },\r\n                legend: {\r\n                  display: false,\r\n                },\r\n              }}\r\n            />\r\n          )\r\n        ) : (\r\n          <Loader active inline=\"centered\" style={{ marginTop: \"20%\" }} />\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport { Input } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nfunction Inputs({\r\n  inputValue,\r\n  setInputValue,\r\n  inputExchange,\r\n  selectedCurrency,\r\n  calculatingPLN,\r\n}) {\r\n  return calculatingPLN ? (\r\n    <>\r\n      <div className=\"section\">\r\n        <Input\r\n          type=\"number\"\r\n          label=\"PLN\"\r\n          labelPosition=\"right\"\r\n          placeholder=\"Wpisz wartość\"\r\n          value={inputValue}\r\n          onChange={(e) => {\r\n            setInputValue(e.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"section\">\r\n        <Input\r\n          label={selectedCurrency ? { content: selectedCurrency } : false}\r\n          labelPosition=\"right\"\r\n          value={inputExchange}\r\n          disabled\r\n        />\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <div className=\"section\">\r\n        <Input\r\n          type=\"number\"\r\n          value={inputValue}\r\n          placeholder=\"Wpisz wartość\"\r\n          labelPosition=\"right\"\r\n          label={selectedCurrency ? { content: selectedCurrency } : false}\r\n          onChange={(e) => {\r\n            setInputValue(e.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"section\">\r\n        <Input\r\n          disabled\r\n          value={inputExchange}\r\n          label=\"PLN\"\r\n          labelPosition=\"right\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Inputs;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Select, Icon } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\n//Component\r\nimport Inputs from \"./Inputs\";\r\n\r\nfunction Form({\r\n  error,\r\n  options,\r\n  isLoaded,\r\n  selectedCurrency,\r\n  setSelectedCurrency,\r\n}) {\r\n  const [inputValue, setInputValue] = useState(false);\r\n  const [inputExchange, setInputExchange] = useState(\"\");\r\n  const [selectedExchange, setSelectedExchange] = useState(false);\r\n  const [calculatingPLN, setCalculatingPLN] = useState(true);\r\n\r\n  function btnClick(e) {\r\n    e.preventDefault();\r\n    if (selectedExchange) {\r\n      if (calculatingPLN) {\r\n        let exchange = inputValue / selectedExchange;\r\n        if (!isNaN(exchange) && exchange !== 0) {\r\n          setInputExchange(Math.round(exchange * 100) / 100);\r\n        }\r\n      } else {\r\n        let exchange = inputValue * selectedExchange;\r\n        if (!isNaN(exchange) && exchange !== 0) {\r\n          setInputExchange(Math.round(exchange * 100) / 100);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function changeValueToCalc() {\r\n    setInputValue(\"\");\r\n    setInputExchange(\"\");\r\n    setCalculatingPLN(!calculatingPLN);\r\n  }\r\n\r\n  return (\r\n    <div className=\"calc-section\">\r\n      <form onSubmit={btnClick}>\r\n        <div className=\"section\">\r\n          <Select\r\n            onChange={(e, data) => {\r\n              setSelectedCurrency(data.value);\r\n              for (let i = 0; i < options.length; i++) {\r\n                if (data.value === options[i].value) {\r\n                  return setSelectedExchange(\r\n                    Math.round(options[i].exchange * 10000) / 10000\r\n                  );\r\n                }\r\n              }\r\n            }}\r\n            placeholder=\"Wybierz walutę\"\r\n            selection\r\n            options={options}\r\n            loading={isLoaded ? false : true}\r\n            disabled={isLoaded && !error ? false : true}\r\n          />\r\n        </div>\r\n        <Inputs\r\n          inputValue={inputValue}\r\n          setInputValue={setInputValue}\r\n          inputExchange={inputExchange}\r\n          selectedCurrency={selectedCurrency}\r\n          calculatingPLN={calculatingPLN}\r\n        />\r\n\r\n        <div className=\"section\">\r\n          <Button\r\n            content=\"Przelicz\"\r\n            primary\r\n            icon=\"exchange\"\r\n            onClick={btnClick}\r\n            disabled={error ? true : false}\r\n          />\r\n          <Button icon secondary onClick={changeValueToCalc}>\r\n            <Icon name=\"arrows alternate vertical\" />\r\n          </Button>\r\n          {selectedCurrency ? (\r\n            calculatingPLN ? (\r\n              <p className=\"rate\">\r\n                Aktualny kurs:{\" \"}\r\n                {Math.round((1 / selectedExchange) * 1000) / 1000}\r\n              </p>\r\n            ) : (\r\n              <p className=\"rate\">Aktualny kurs: {selectedExchange}</p>\r\n            )\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\n//Component\nimport Chart from \"./components/Chart\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  const [options, setOptions] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://api.nbp.pl/api/exchangerates/tables/A/?format=json\")\n      .then((res) => res.json())\n      .then((data) => {\n        let arr = [];\n        data[0].rates.forEach((e) => {\n          let currency =\n            e.currency.charAt(0).toUpperCase() + e.currency.slice(1);\n          arr.push({\n            key: e.code,\n            value: e.code,\n            text: `${e.code} - ${currency}`,\n            exchange: e.mid,\n          });\n          setOptions(arr);\n          setLoaded(true);\n        });\n      })\n      .catch((err) => {\n        setError(true);\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container text textAlign=\"center\" style={{ margin: 0 }}>\n        <div className=\"header\">\n          <h1>Kalkulator Walutowy</h1>\n          {error ? (\n            <h3 style={{ color: \"red\" }}>\n              Wystąpił problem, spróbuj ponownie później.\n            </h3>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <Form\n          error={error}\n          options={options}\n          isLoaded={isLoaded}\n          selectedCurrency={selectedCurrency}\n          setSelectedCurrency={setSelectedCurrency}\n        />\n        <Chart selectedCurrency={selectedCurrency} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}